{"version":3,"sources":["componets/character.js","componets/image.js","componets/quote.js","App.js","serviceWorker.js","index.js"],"names":["Character","character","id","className","Image","image","direction","src","alt","Quote","quote","App","props","state","data","characterDirection","renderNewQuote","bind","tweetQuote","fetch","response","json","randomIndex","Math","floor","random","this","setState","tweetUrl","window","open","onClick","tittle","role","tabIndex","target","onKeyDown","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAEe,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,UAEpC,OACI,uBAAGC,GAAG,UACF,0BAAMC,UAAU,kBAAhB,4BACkCF,GAJ/B,eCDI,SAASG,EAAT,GAAiD,IAAhCC,EAA+B,EAA/BA,MAAOJ,EAAwB,EAAxBA,UAAWK,EAAa,EAAbA,UAC9C,MAAa,IAATD,EACO,mBACa,QAAbC,EAEH,yBACIH,UAAU,OACVI,IAAKF,EACLG,IAAG,8BAAyBP,KAI5B,yBAAKM,IAAKF,EAAOG,IAAG,8BAAyBP,KCZ9C,SAASQ,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAG5B,OACI,gCAAYR,GAAG,QACX,0BAAMA,GAAG,kBAAT,UACCQ,GALE,iCAMH,0BAAMR,GAAG,kBAAT,W,WCuGGS,G,kBAvGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,KACNJ,MAAO,GACPL,MAAO,GACPJ,UAAW,GACXc,mBAAoB,IAEtB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAVD,E,6KAcL,wD,mBACWE,MADX,0D,cACNC,E,0BACaA,EAASC,Q,OAAtBP,E,OACAQ,EAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,U,EACoBX,EAAKQ,GAArDZ,E,EAAAA,MAAOL,E,EAAAA,MAAOJ,E,EAAAA,UAAWc,E,EAAAA,mBACjCW,KAAKC,SAAS,CACZb,OACAJ,QACAL,QACAJ,YACAc,uB,yFAIc,IACRD,EAASY,KAAKb,MAAdC,KADO,EAGyCA,EADpCS,KAAKC,MAAsB,GAAhBD,KAAKE,WAC5Bf,EAHO,EAGPA,MAAOL,EAHA,EAGAA,MAAOJ,EAHP,EAGOA,UAAWc,EAHlB,EAGkBA,mBACjCW,KAAKC,SAAS,CACZb,OACAJ,QACAL,QACAJ,YACAc,yB,mCAIU,IAAD,EACkBW,KAAKb,MAA1BH,EADG,EACHA,MAAOT,EADJ,EACIA,UACT2B,EAAQ,gDAA4ClB,EAA5C,cAAuDT,GACrE4B,OAAOC,KAAKF,K,+BAGJ,IAAD,EACqDF,KAAKb,MAA3DC,EADC,EACDA,KAAMJ,EADL,EACKA,MAAOL,EADZ,EACYA,MAAOJ,EADnB,EACmBA,UAAWc,EAD9B,EAC8BA,mBACrC,OAAID,EAEA,yBAAKX,UAAU,OACb,0BAAMD,GAAG,aACP,kDACA,yBAAKC,UAAU,iBACb,kBAACM,EAAD,CAAOC,MAAOA,IACd,kBAACN,EAAD,CACEE,UAAWS,EACXV,MAAOA,EACPJ,UAAWA,KAIf,kBAACD,EAAD,CAAWC,UAAWD,IACtB,yBAAKG,UAAU,eACb,4BACEA,UAAU,SACVD,GAAG,YACH6B,QAASL,KAAKV,gBAHhB,aAOA,uBACEb,UAAU,eACVD,GAAG,cACH8B,OAAO,cACPC,KAAK,SACLC,SAAS,IACTC,OAAO,SACPJ,QAASL,KAAKR,WACdkB,UAAWV,KAAKR,YARlB,cAWC,kBAAC,IAAD,CAAkBf,UAAU,mBAUnC,yBAAKA,UAAU,OACb,0BAAMD,GAAG,YAAYC,UAAU,SAA/B,kC,GA/FQkC,IAAMC,YCIJC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.12ee04e9.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Character({ character }){\nlet text = \"Loading...\";\nreturn (\n    <p id=\"author\">\n        <span className=\"letter-spacing\">\n            &mdash;&mdash;&mdash;&mdash; {character ? character : text}\n        </span>\n    </p>\n);\n}","import React from \"react\";\n\nexport default function Image({ image, character, direction }) {\n    if (image == \"\") {\n        return \"Loading Image...\";\n    } else if (direction == \"Left\") {\n        return (\n            <img\n                className=\"left\"\n                src={image}\n                alt={`Simpsons character: ${character}`}\n            />\n        );\n    } else {\n        return  <img src={image} alt={`Simpsons character: ${character}`}/>\n    }\n}\n","import React from \"react\";\n\nexport default function Quote({ quote }) {\n    let text = \"Not avaliable at the moment...\";\n\n    return (\n        <blockquote id=\"text\">\n            <span id=\"quotation-mark\">&rdquo;</span>\n            {quote ? quote : text}\n            <span id=\"quotation-mark\">&rdquo;</span>\n        </blockquote>\n    );\n}","import React from 'react';\nimport Character from './componets/character';\nimport Image from './componets/image';\nimport Quote from './componets/quote.js';\nimport { AiOutlineTwitter } from \"react-icons/ai\"\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      quote: \"\",\n      image: \"\",\n      character: \"\",\n      characterDirection: \"\"\n    };\n    this.renderNewQuote = this.renderNewQuote.bind(this);\n    this.tweetQuote = this.tweetQuote.bind(this);\n  }\n\n  async componentDidMount() {\n    const url = \"https://thesimpsonsquoteapi.glitch.me/quotes?count=10\";\n    const response = await fetch(url);\n    const data = await response.json();\n    const randomIndex = Math.floor(Math.random() * 10);\n    const { quote, image, character, characterDirection } = data[randomIndex];\n    this.setState({\n      data,\n      quote,\n      image,\n      character,\n      characterDirection\n    });\n  }\n\n  renderNewQuote() {\n    const { data } = this.state;\n    const randomIndex = Math.floor(Math.random() * 10);\n    const { quote, image, character, characterDirection } = data[randomIndex];\n    this.setState({\n      data,\n      quote,\n      image,\n      character,\n      characterDirection\n    });\n  }\n\n  tweetQuote() {\n    const { quote, character } = this.state;\n    const tweetUrl = `https://twitter.com/intent/tweet?text=${quote} - ${character}`;\n    window.open(tweetUrl);\n  }\n\n  render() {\n    let { data, quote, image, character, characterDirection } = this.state;\n    if (data) {\n      return (\n        <div className=\"App\">\n          <main id=\"quote-box\">\n            <h1>The Simpson quotes</h1>\n            <div className=\"quote-and-pic\">\n              <Quote quote={quote} />\n              <Image\n                direction={characterDirection}\n                image={image}\n                character={character}\n              />\n            </div>\n\n            <Character character={Character} />\n            <div className=\"buttonGroup\">\n              <button\n                className=\"button\"\n                id=\"new-quote\"\n                onClick={this.renderNewQuote}\n              >\n                New Quote\n              </button>\n              <a\n                className=\"button tweet\"\n                id=\"tweet-quote\"\n                tittle=\"Tweet this!\"\n                role=\"button\"\n                tabIndex=\"0\"\n                target=\"_blank\"\n                onClick={this.tweetQuote}\n                onKeyDown={this.tweetQuote}\n              >\n                Tweet Quote\n               <AiOutlineTwitter className=\"tweet icon\" />\n              </a>\n            </div>\n\n\n          </main>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <main id=\"quote-box\" className=\"noAPI\">\n            \"Loading Simpson API ...\"\n          </main>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}